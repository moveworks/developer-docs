name: ai-doc-check

on:
  pull_request:
    types: [opened] # Trigger only when a new PR is opened

jobs:
  lint_readme:
    runs-on: ubuntu-latest
    # This job will now run for any newly opened Pull Request,
    # regardless of the number of commits it contains at the time of opening.

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Checkout the head branch of the Pull Request to access the changed files
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Get changed files and check for README.md
      id: get_changed_files # Assign an ID to this step to reference its outputs later
      uses: actions/github-script@v7 # Use github-script to interact with the GitHub API
      with:
        script: |
          // Fetch the list of files changed in the current Pull Request
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });

          // Check if 'README.md' is among the changed files, including those in subdirectories
          // It will find any file ending with '/README.md' or exactly 'README.md' for the root file.
          const readmeFile = files.find(file => file.filename === 'README.md' || file.filename.endsWith('/README.md'));
          if (readmeFile) {
            console.log('README.md was changed. Proceeding with AI Doc Check.');
            // Set outputs that can be used by subsequent steps
            core.setOutput('readme_changed', true);
            // Explicitly JSON.stringify the path to ensure robust parsing later
            core.setOutput('readme_path', JSON.stringify(readmeFile.filename));
          } else {
            console.log('README.md was not changed. Skipping AI Doc Check.');
            core.setOutput('readme_changed', false);
          }
        result-encoding: json # Encode the output as JSON

    - name: Read README.md content and Base64 encode it
      id: read_readme_content # Assign an ID to this step
      # This step only runs if README.md was detected as changed in the previous step
      if: steps.get_changed_files.outputs.readme_changed == 'true'
      run: |
        # Get the path of the README.md file from the previous step's output.
        # Use fromJson to correctly parse the JSON string output from the previous step.
        README_PATH="${{ fromJson(steps.get_changed_files.outputs.readme_path) }}"
        # Read the content of the README.md file using the resolved path
        # and base64 encode it. This prevents issues with special characters or multi-line content in YAML.
        README_CONTENT_BASE64=$(cat "$README_PATH" | base64 -w 0)
        # Output the base64 encoded content
        echo "readme_content_base64=$README_CONTENT_BASE64" >> $GITHUB_OUTPUT
        echo "README content read and base64 encoded successfully."

    - name: Install Python dependencies
      # Only install Python if README.md was changed
      if: steps.get_changed_files.outputs.readme_changed == 'true'
      uses: actions/setup-python@v5 # Setup Python environment
      with:
        python-version: '3.x' # Use the latest Python 3 version

    - name: Install Google Generative AI library
      # Only install the library if README.md was changed
      if: steps.get_changed_files.outputs.readme_changed == 'true'
      run: pip install google-generativeai # Install the necessary Python library for Gemini

    - name: Call Gemini LLM for review
      id: gemini_review # Assign an ID to this step
      # This step only runs if README.md was changed
      if: steps.get_changed_files.outputs.readme_changed == 'true'
      env:
        # Pass the Gemini API key from GitHub Secrets as an environment variable
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # Pass the Base64 encoded README content as an environment variable
        README_CONTENT_BASE64: ${{ steps.read_readme_content.outputs.readme_content_base64 }}
        # GITHUB_OUTPUT is an environment variable pointing to the file where outputs should be written
        GITHUB_OUTPUT: ${{ github.env.GITHUB_OUTPUT }}
      run: |
        python <<EOF
        import google.generativeai as genai
        import os
        import base64 # Import base64 for decoding

        # Configure the Gemini API with the key from environment variables
        genai.configure(api_key=os.environ.get('GEMINI_API_KEY'))
        # Initialize the Gemini model (using gemini-2.0-flash for speed)
        model = genai.GenerativeModel('gemini-2.0-flash')

        readme_content_base64 = os.environ.get('README_CONTENT_BASE64')
        if not readme_content_base64:
            print("Error: README content (base64) is empty.")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"review_output<<EOF\n")
                f.write(f"Error: README content (base64) is empty.")
                f.write(f"\nEOF\n")
            exit(1)

        # Decode the base64 content back to a string
        readme_content = base64.b64decode(readme_content_base64).decode('utf-8')

        # Construct the prompt for Gemini
        prompt = f"""
        Review the following README.md file content for grammar, style, and substance.
        Provide specific suggestions for improvement.
        Focus on clarity, conciseness, accuracy, and overall readability.
        If there are no significant issues, state that.
        Format your suggestions clearly, perhaps using bullet points or numbered lists.

        README.md Content:
        ---
        {readme_content}
        ---

        Suggestions:
        """

        try:
            # Generate content using the Gemini model
            response = model.generate_content(prompt)
            review_text = response.text
            
            # Write the review text to GITHUB_OUTPUT directly using the multi-line delimiter
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"review_output<<EOF\n")
                f.write(review_text)
                f.write(f"\nEOF\n")
            print(f"Review generated successfully.")
        except Exception as e:
            print(f"Error calling Gemini API: {e}")
            # If an error occurs, still set an output so the next step can check it
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f"review_output<<EOF\n")
                f.write(f"Error: Could not get review from Gemini. Details: {e}")
                f.write(f"\nEOF\n")
            exit(1)
        EOF

    - name: Post Gemini suggestions as PR comment
      # This step runs only if a review was successfully generated and README.md was changed
      if: steps.gemini_review.outputs.review_output != '' && steps.get_changed_files.outputs.readme_changed == 'true'
      uses: actions/github-script@v7 # Use github-script to post the comment
      with:
        # Pass the review output as an explicit input to github-script
        review_content: ${{ steps.gemini_review.outputs.review_output }}
        script: |
          // Get the review output from the step's input.
          // This is the safest way to handle arbitrary multi-line string content.
          const reviewOutput = core.getInput('review_content');
          const prNumber = context.issue.number;

          if (!prNumber) {
            console.log('Could not get PR number. Skipping comment.');
            return;
          }

          // Construct the comment body in Markdown.
          // Escape backticks in the reviewOutput to prevent premature closing of markdown code blocks.
          const escapedReviewOutput = reviewOutput.replace(/`/g, '\\`');
          const commentBody = `##Review by Gemini LLM\n\n${escapedReviewOutput}\n\n---
          _This review was generated automatically for this Pull Request._`;

          try {
            // Create a comment on the Pull Request
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
            console.log('Comment posted successfully.');
          } catch (error) {
            console.error(`Failed to post comment: ${error.message}`);
          }
